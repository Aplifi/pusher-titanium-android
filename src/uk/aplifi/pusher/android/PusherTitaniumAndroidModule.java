/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package uk.aplifi.pusher.android;

import java.util.HashMap;

import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;

import uk.aplifi.pusher.android.logging.LoggingHandler;
import com.pusher.client.channel.PrivateChannel;
import com.pusher.client.connection.ConnectionEventListener;
import com.pusher.client.connection.ConnectionState;
import com.pusher.client.connection.ConnectionStateChange;

@Kroll.module(name="PusherTitaniumAndroid", id="uk.aplifi.pusher.android")
public class PusherTitaniumAndroidModule extends KrollModule {
	
	private static final String TAG = "PusherTitaniumAndroidModule";

	private KrollFunction connectedCallback = null;
	private PusherAdapter pusherAdapter;
	
	public PusherTitaniumAndroidModule() {
		super();
		pusherAdapter = new PusherAdapter();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		// put module init code that needs to run when the application is created
	}
	
	@Kroll.method
	public void enableLogging(boolean loggingOn) {
		LoggingHandler.instance().enableLogging(loggingOn);
	}
	
	@Kroll.method
	public void setup(String apiKey, String authPath) {
		LoggingHandler.instance().log(TAG, "setup called");
		LoggingHandler.instance().log(TAG, "setup apiKey: " + apiKey);
		LoggingHandler.instance().log(TAG, "setup authPath: " + authPath);
		pusherAdapter.setup(apiKey, authPath);
	}
	
	@Kroll.method
	public void connect() {
		LoggingHandler.instance().log(TAG, "connect called");
		pusherAdapter.connect(connectionEventListener);
	}
	
	@Kroll.method
	public void disconnect() {
		LoggingHandler.instance().log(TAG, "disconnect called");
		pusherAdapter.disconnect();
	}
	
	private ConnectionEventListener connectionEventListener = new ConnectionEventListener() {
	    
		@Override
	    public void onConnectionStateChange(ConnectionStateChange change) {
			LoggingHandler.instance().log(TAG, "State changed to " + change.getCurrentState() + " from " + change.getPreviousState());
			
			if ( (!change.getPreviousState().equals(ConnectionState.CONNECTED)) && (change.getCurrentState().equals(ConnectionState.CONNECTED)) ) {
				sendConnectedEvent();
			}
	    }

	    @Override
	    public void onError(String message, String code, Exception e) {
	    	LoggingHandler.instance().log(TAG, "There was a problem connecting!");
	    	LoggingHandler.instance().log(TAG, "msg " + message);
	    	
	    	if (e != null) {
		    	LoggingHandler.instance().log(TAG, "e" + e.getMessage());
		    	LoggingHandler.instance().log(TAG, "e type " + e.getClass());
		    	LoggingHandler.instance().log(TAG, "e stack " + e.getStackTrace());
	    	}
	    	else {
	    		LoggingHandler.instance().log(TAG, "e is null ");
	    	}
	    	
	    	if (code != null) {
	    		LoggingHandler.instance().log(TAG, "code " + code);
	    	}
	    }
	};
	
	@Kroll.method
	public void addEventListener(HashMap args) {
		
		Object callback;

		if (args.containsKey("connected")) {
			callback = args.get("connected");
			if (callback instanceof KrollFunction) {
				connectedCallback = (KrollFunction) callback;
			}
		}
	}
	
	private void sendConnectedEvent() {
	    
		if (connectedCallback != null) {
	        HashMap event = new HashMap();

	        connectedCallback.call(getKrollObject(), event);
	    }
	}
	
	
	@Kroll.method
	public ChannelAdapter subscribeChannel(String channelName) {
		LoggingHandler.instance().log(TAG, "subscribeChannel called");
		
		PrivateChannel channel = pusherAdapter.subscribePrivateChannel(channelName);
		
		ChannelAdapter channelAdapter = new ChannelAdapter();
		channelAdapter.setup(channel);
		return channelAdapter;
	}
	
	@Kroll.method
	public void unsubscribeChannel(String channelName) {
		LoggingHandler.instance().log(TAG, "unsubscribeChannel called");
		
		pusherAdapter.unsubscribeChannel(channelName);
	}
	
}

